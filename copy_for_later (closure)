#define false 0
#define true 1

#include <stdlib.h>
#include <signal.h>
#include <string.h>
#include <errno.h>
#include <callback.h>

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

#include <sys/socket.h>
#include <sys/sendfile.h>
#include <netinet/in.h>
#include <arpa/inet.h>

void handler_sigint(int *server, int *client_connection)
{
  printf("Stopping server ...\n");
  close(*client_connection);
  close(*server);
  printf("Server stopped.\n");
  exit(0);
}

void hanlde_interrupt(int *server, int *client_connection)
{
  int (*closure_sigint)(int signo) = alloc_callback(&handler_sigint, &server, &client_connection);
  if (signal(SIGINT, closure_sigint) == SIG_ERR)
    printf("\ncan't catch SIGINT\n");
}

struct sockaddr_in get_server_config(int port)
{
  struct sockaddr_in addr = {
      AF_INET,
      htons(port),
      0};
  return addr;
}

int get_file_size(char *file_path)
{
  FILE *file = fopen(file_path, "r");
  fseek(file, 0, SEEK_END);
  int size = ftell(file);
  fseek(file, 0, SEEK_SET);
  fclose(file);
  return size;
}

void start_server(int *server)
{
  const int AUTO_CHOOSE_PROTOCOL = 0;
  const int MAX_CONNECTIONS = 10;
  const int optVal = 1;
  const socklen_t optLen = sizeof(optVal);

  printf("Starting server ...\n");

  // initialize server on port 8080
  if ((*server = socket(AF_INET, SOCK_STREAM, AUTO_CHOOSE_PROTOCOL)) == -1)
  {
    printf("Error creating socket\n");
    exit(1);
  }

  // set socket options for unbinding the port by process termination
  if (setsockopt(*server, SOL_SOCKET, SO_REUSEADDR, (void *)&optVal, optLen) == -1)
  {
    close(*server);
    printf("Error setting socket options\n");
    exit(1);
  }

  // get configuration for server, e.g. port
  struct sockaddr_in addr = get_server_config(8080);

  // bind the server to the port
  if (bind(*server, &addr, sizeof(addr)) == -1)
  {
    close(*server);
    if (errno == EADDRINUSE)
      printf("Port is already in use\n");
    printf("Error binding to port\n");
    exit(1);
  }

  // listen to the port
  if (listen(*server, MAX_CONNECTIONS) == -1)
  {
    close(*server);
    printf("Error listening to port\n");
    exit(1);
  }

  printf("Server started.\n");
}

void handle_requests(int *server, int *client_connection)
{
  const int NO_OPTIONS = 0;
  const char *STOP_COMMAND = "stop"; // stop server
  const char *STOP_MESSAGE = "Server stopped\n";
  char request_data[512] = {0};

  while (true)
  {
    // clear the buffer for requests
    memset(&request_data[0], 0, sizeof(request_data));

    // accept client connection
    if ((*client_connection = accept(*server, 0, 0)) == -1)
    {
      printf("Error accepting client\n");
      return;
    }

    // read the request from the client
    if (recv(*client_connection, request_data, sizeof(request_data), NO_OPTIONS) == -1)
    {
      close(*client_connection);
      printf("Error reading from client\n");
      return;
    }

    // GET /file.html .....
    // Remove "GET /" from the request_data and terminate string at first space
    // to get the file name
    char *file_path = request_data + 5;
    *strchr(file_path, ' ') = 0;

    // if the file name is "stop" then stop the server
    if (strcmp(file_path, STOP_COMMAND) == 0)
    {
      send(*client_connection, STOP_MESSAGE, sizeof(STOP_MESSAGE), NO_OPTIONS);
      close(*client_connection);
      printf("Stop receiving ...\n");
      break;
    }

    // open the file and send it to the client
    int requested_file_size = get_file_size(file_path);
    int requested_file_fd = open(file_path, O_RDONLY);

    sendfile(*client_connection, requested_file_fd, 0, requested_file_size);

    // close the file client connection
    close(requested_file_fd);
    close(*client_connection);
  }
}

void main()
{
  int *server = malloc(sizeof(int));
  int *client_connection = malloc(sizeof(int));

  hanlde_interrupt(server, client_connection);

  // start the server
  start_server(server);
  handle_requests(server, client_connection);

  // close the server
  printf("Stopping server ...\n");
  close(*server);
  printf("Server stopped.\n");
  exit(0);
}
